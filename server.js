require('dotenv').config();
const express=require('express'); const fetch=require('node-fetch'); const bodyParser=require('body-parser'); const cors=require('cors');
const app=express(); app.use(cors()); app.use(bodyParser.json()); const OPENAI_KEY=process.env.OPENAI_KEY; if(!OPENAI_KEY){ console.error('Set OPENAI_KEY in .env'); process.exit(1); }
app.post('/ai', async (req,res)=>{ try{ const {prompt,roleplay=false,max_tokens=150}=req.body; if(!prompt) return res.status(400).json({error:'prompt required'}); const system = roleplay ? 'You are a playful romantic assistant.' : 'You are a helpful romantic assistant.'; const payload={ model:'gpt-4o-mini', messages:[{role:'system',content:system},{role:'user',content:prompt}], max_tokens }; const r=await fetch('https://api.openai.com/v1/chat/completions',{ method:'POST', headers:{ 'Authorization':`Bearer ${OPENAI_KEY}`, 'Content-Type':'application/json' }, body: JSON.stringify(payload) }); if(!r.ok){ const t=await r.text(); return res.status(502).json({error:t}); } const json=await r.json(); const answer=json.choices?.[0]?.message?.content || 'Demo answer'; res.json({answer}); }catch(e){ console.error(e); res.status(500).json({error:e.message}); } });
app.get('/ping',(req,res)=>res.json({ok:true})); app.listen(process.env.PORT||3000,()=>console.log('AI proxy running'));
